<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:wfw="http://wellformedweb.org/CommentAPI/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
  xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
  >

  <channel>
    <title>Ian Feather</title>
    <atom:link href="http://ianfeather.co.uk/feed.xml" rel="self" type="application/rss+xml" />
    <link>http://Ianfeather.github.com/ianfeatherV3</link>
    <description></description>
    <lastBuildDate>Mon, 02 Dec 2013 14:02:57 +0000</lastBuildDate>
    <language>en</language>
    <copyright>Ian Feather</copyright>

    

      

      

      <item>
        <title>Front End Ops</title>
        <link>
        http://Ianfeather.github.com/ianfeatherV3/front-end-ops/
      </link>
        <pubDate>Fri, 29 Nov 2013 10:52:00 +0000</pubDate>
        <guid>
        http://Ianfeather.github.com/ianfeatherV3/front-end-ops/
      </guid>
        <description>
        
          &lt;p&gt;I recently spoke at &lt;a href='http://twitter.com/frontendlondon'&gt;@frontendlondon&lt;/a&gt; on this subject. I thought about writing a blog post about it but in the end I published my slides in html and have tried to include as much detail as possible.&lt;/p&gt;

&lt;p&gt;Hitting &amp;#8216;i&amp;#8217; at any point will reveal some more detail and useful links about each topic. It was a pretty high level talk so nothing goes into too much detail: follow the links and explore the parts you&amp;#8217;re interested in.&lt;/p&gt;

&lt;p&gt;The &lt;a href='http://www.ianfeather.co.uk/presentations/front-end-ops'&gt;presentation&lt;/a&gt; was built using &lt;a href='bartaz.github.io/impress.js/â€Ž'&gt;impress.js&lt;/a&gt; and I used remote-impress for the presentation. Both tools were fantastic and easy to use.&lt;/p&gt;
        
        </description>
      </item>

    

      

      

      <item>
        <title>Web Fonts and the Critical Path</title>
        <link>
        http://Ianfeather.github.com/ianfeatherV3/web-fonts-and-the-critical-path/
      </link>
        <pubDate>Thu, 06 Jun 2013 08:52:00 +0100</pubDate>
        <guid>
        http://Ianfeather.github.com/ianfeatherV3/web-fonts-and-the-critical-path/
      </guid>
        <description>
        
          &lt;p&gt;This blog corresponds to my May 2013 talk &lt;a href='http://twitter.com/frontendlondon'&gt;@frontendlondon&lt;/a&gt;. The slides for that talk can be found on &lt;a href='http://www.slideshare.net/ianfeather/fel-presentation'&gt;slideshare&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id='the_story_behind_fout'&gt;The story behind FOUT&lt;/h2&gt;

&lt;p&gt;CSS is justified critical due to the flash of unstyled content which would ensue if we deferred it. This is the main reason why web fonts are deemed critical to web pages: to avoid the flash of unstyled text which is then later repainted.&lt;/p&gt;

&lt;p&gt;When font-face landed we had this new tool at our disposal. It was shiny, fancy and it brought with it its own challenges: namely that in certain browsers there would be a flash of the fallback font until the browser had finished downloading the resource. We had a problem and, as front end developers love to do, we set about to race to be the fastest to fix it.&lt;/p&gt;

&lt;p&gt;Somewhere along that path it became a best practice to place web fonts on the critical path. If your site had a Flash of Unstyled Text it was considered a poor implementation of font-face. It still is, for that matter.&lt;/p&gt;

&lt;h2 id='but_how_critical_are_web_fonts'&gt;But how critical &lt;em&gt;are&lt;/em&gt; web fonts?&lt;/h2&gt;

&lt;p&gt;How often do we stop to reconsider our best practices? We solve a problem but does it really benefit our users? Let&amp;#8217;s talk about first world problems:&lt;/p&gt;

&lt;p&gt;You&amp;#8217;re on the london underground (we have free wifi at stations now) and you come across a link on twitter which looks interesting as you&amp;#8217;re rocketing through the tunnel. You know that when you get to the station you have about 45 seconds to connect to the wifi, to hit the link, and for the content to load before you&amp;#8217;re plunged back into the tunnel; instead you get a white screen because the site has put a 50k font on the critical path and you never get to read the content. At this point are web fonts critical to you as a user? Or would you have preferred the content straight up?&lt;/p&gt;

&lt;p&gt;Another example, and one closer to home for me and the team at Lonely Planet, is that of internet cafes. You might be in Thailand trying to book a boat, transfer money, find a place to stay that night, and you&amp;#8217;re sitting in an internet cafe sharing one DSL line with 50 other kids all playing online multiplayer games. You&amp;#8217;re staring at white screens and invisible text. We&amp;#8217;re forcing a design luxury on a user who just wants the content.&lt;/p&gt;

&lt;p&gt;And those are just the &lt;em&gt;first&lt;/em&gt; world problems.&lt;/p&gt;

&lt;h2 id='the_browser_and_the_spec'&gt;The browser and the spec&lt;/h2&gt;

&lt;p&gt;I always advocate leveraging the browser to do the heavy lifting for you and we always try to avoid reimplementing browser features. This should be sound advice for most web developers. That said, you don&amp;#8217;t always have to agree with browsers and their implementation.&lt;/p&gt;

&lt;p&gt;With web fonts, browsers are forced to make a decision from two distinct options: block the render or repaint later. The spec leaves it wide open for implementation:&lt;/p&gt;
&lt;blockquote&gt;&amp;hellip;user agents may render text as it would be rendered if downloadable font resources are not available or they may render text transparently with fallback fonts to avoid a flash of text using a fallback font.&lt;/blockquote&gt;&lt;blockquote&gt;In cases where the font download fails user agents must display text, simply leaving transparent text is considered non-conformant behavior.&lt;/blockquote&gt;
&lt;p&gt;As you would imagine, from a wide open spec like this, implementation is very varied:&lt;/p&gt;
&lt;table class='table--left'&gt;
  &lt;thead class='table-header'&gt;
     &lt;th&gt;IE&lt;/th&gt; 
     &lt;th&gt;Firefox&lt;/th&gt; 
     &lt;th&gt;Webkit&lt;/th&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td class='val' data-label='IE'&gt;&lt;div class='cell--inner'&gt;Text rendered immediately then repainted later.&lt;/div&gt;&lt;/td&gt;
      &lt;td class='val' data-label='Firefox'&gt;&lt;div class='cell--inner'&gt;Invisible Text with a 3s Timeout&lt;/div&gt;&lt;/td&gt;
      &lt;td class='val' data-label='Webkit'&gt;&lt;div class='cell--inner'&gt;Invisible Text with no Timeout&lt;/div&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Out of these, webkit is the only current implementation which is non-conformant. Firefox tries to hedge their bets with a clever timeout implementation but 3s is still a somewhat arbitrary number which is easily hit if you throttle your bandwidth even slightly. When that happens you&amp;#8217;re hitting your users twice as hard with slower perceived speed &lt;em&gt;and&lt;/em&gt; a flash of unstyled text. But at least the users will see the content eventually&amp;#8230;&lt;/p&gt;

&lt;p&gt;Webkit have been working on the timeout issue and how best to calculate where that threshold should fall. This is good progress but, as you can see from the below dates, we&amp;#8217;re now four years into a decision:&lt;/p&gt;

&lt;p&gt;&lt;a href='https://bugs.webkit.org/show_bug.cgi?id=25207'&gt;https://bugs.webkit.org/show_bug.cgi?id=25207&lt;/a&gt; ~ 2009 &lt;a href='https://code.google.com/p/chromium/issues/detail?id=235303'&gt;https://code.google.com/p/chromium/issues/detail?id=235303&lt;/a&gt; ~ 2013&lt;/p&gt;

&lt;p&gt;This may say more about the challenge than it does about priorities. There simply isn&amp;#8217;t a correct answer that will satisfy all users: invisible text is considered a feature and a bug to many.&lt;/p&gt;

&lt;h2 id='alright_i_get_it_but_i_still_want_to_have_fonts_on_my_site'&gt;Alright I get it, but I still want to have fonts on my site.&lt;/h2&gt;

&lt;p&gt;So do I. Web fonts can look fantastic and should still be embraced as a great feature. What we need to work on is minimising their impact on the speed of the web.&lt;/p&gt;

&lt;h2 id='trimming_the_fat'&gt;Trimming the fat&lt;/h2&gt;

&lt;p&gt;Before you even have to think about font loading techniques you should first look at reducing the weight of the font by subsetting. This is the practice of removing superflous glyphs that you serve within the font. For example, we remove all the mathematical glyphs and accept that if they are required they will be served by the next font down in the stack. They will look different to their surrounding glyphs, if requested, but this is an edge case we are happy to deal with.&lt;/p&gt;

&lt;p&gt;The savings for this kind of bespoke pruning will usually be fairly small. That said, if you are using an extended font and only serving characters in one language, there could be some really significant savings.&lt;/p&gt;

&lt;p&gt;LP font before and after:&lt;/p&gt;
&lt;img src='/images/benton.png' /&gt;&lt;img src='/images/benton_subset.png' /&gt;
&lt;p&gt;There is an open source program called FontForge (archaic but powerful) which can be used to achieve this, as well as commercial programs such as TypeTool, Glyphs and Glyphs mini.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s worth mentioning that there are generally legal requirements surrounding the modification of font files. Ensure that you check the terms and conditions of whichever foundry you are using before doing so.&lt;/p&gt;

&lt;h2 id='making_the_font_work_harder'&gt;Making the font work harder&lt;/h2&gt;

&lt;p&gt;If you have a design that requires heavy typography and liberal use of icons you might find performance optimisations in bundling the two together. Using one of the above programs you would be able to load your icons in vector format and place them in the private unicode area of your font.&lt;/p&gt;

&lt;p&gt;By doing this you create a library of scalable, retina ready icons without the need for any extra requests.&lt;/p&gt;

&lt;p&gt;The only downside to this approach I have found is it handcuffs you into coupling the same level of importance to your fonts as to your icons. If you decided that you wanted to progressively load your font after the page, the icons would come along for the ride.&lt;/p&gt;
&lt;img src='/images/benton_lp.png' /&gt;
&lt;h2 id='font_loading_solutions'&gt;Font Loading solutions&lt;/h2&gt;

&lt;p&gt;If you&amp;#8217;re loading web fonts via a third party using JS you should be loading it asynchronously. This should really be a default setting as otherwise you&amp;#8217;re creating a SPOF for your site. I would highly reccommend looking into the Google Web Font Loader and taking a look at these great slides by &lt;a href='http://www.slideshare.net/clagnut/responsive-web-fonts'&gt;Richard Rutter&lt;/a&gt; on the subject.&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re self hosting there are a number of techniques available to your. Below are five different methods, the first two place the font on the critical path and block the rendering of the page whilst the latter ones showcase our options for deferring the font load.&lt;/p&gt;

&lt;h3 id='1_synchronous_external'&gt;1. Synchronous, external&lt;/h3&gt;
&lt;pre&gt;&lt;code class='language-css'&gt;@font-face {
  font-family: 'MyWebFont';
	src: url('webfont.eot'); /* IE9 Compat Modes */
	src: url('webfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
     url('webfont.woff') format('woff'), /* Modern Browsers */
     url('webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
     url('webfont.svg#svgFontName') format('svg'); /* Legacy iOS */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is your typical font-face loading technique. In this case you hand all the control to the browser and allow it to load the font using whichever technique they implement.&lt;/p&gt;

&lt;p&gt;This example code is outputted by the &lt;a href='http://www.fontsquirrel.com/tools/webfont-generator'&gt;FontSquirrel generator&lt;/a&gt; which is an invaluable tool for handling fonts cross-browser.&lt;/p&gt;

&lt;h3 id='2_synchronous_inline'&gt;2. Synchronous, Inline&lt;/h3&gt;

&lt;p&gt;The support for .woff font files is approaching 100% these days, with only IE &amp;lt; 9 (.eot) and old Android (.ttf) requiring others.&lt;/p&gt;

&lt;p&gt;Given that, and the ability to base64 encode woff files, we are capable of serving fonts inline to the majority of our users. Doing this means we can reduce the number of requests one further by combining the font with our css. This can be a serious win if latency is an issue for your users, but it comes with a couple of caveats:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Caching&lt;br /&gt; If you&amp;#8217;re deploying new revisions to your css regularly you&amp;#8217;re going to be constantly causing your users to re-download an unchanged font. Not cool. To get around this you can split your css into two: rarely changed and often changed. For example you could bundle your font with your reset, your base styles, your abstractions and your header and footer styles which are likely to also remain unchanged.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Slower perceived speed&lt;br /&gt; The big downside to the inline approach is you block the render of the entire chrome, not just the type you have styled. The user will see nothing but a white screen until the single asset has downloaded at which point the complete page will be rendered. Depending upon the latency of your users this approach can still end up painting to the screen faster than other approaches. You should probably avoid this technique if you are using web fonts in just a few places on your site.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The most important part of using this approach is ensuring that you don&amp;#8217;t serve the woff to browsers that can&amp;#8217;t render it. If your users are browsing your site on old version of Internet Explorer then the chances are they&amp;#8217;re not too happy about it already; don&amp;#8217;t punish them further by forcing them to download 30k + of assets they can&amp;#8217;t use. You can handle this by simply using IE conditionals.&lt;/p&gt;
&lt;pre class='language-html'&gt;&lt;code&gt;&amp;lt;!--[if (gt IE 8) | (IEMobile)]&gt;&amp;lt;!--&amp;gt;
  &amp;lt;link href=&quot;common_core_with_base64.css&quot; media=&quot;all&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&amp;gt;
&amp;lt;!--&amp;lt;![endif]--&amp;gt;

&amp;lt;!--[if (lt IE 9) &amp; (!IEMobile)]&amp;gt;
  &amp;lt;link href=&quot;common_core_without_base64.css&quot; media=&quot;all&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&amp;gt;
&amp;lt;![endif]--&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='3_simple_asynchronous_loading'&gt;3. Simple Asynchronous Loading&lt;/h3&gt;
&lt;pre&gt;&lt;code class='language-javascript'&gt;var f, x;

  x = document.getElementsByTagName(&quot;script&quot;)[0];

  f = window.document.createElement(&quot;link&quot;);

  f.rel = &quot;stylesheet&quot;;

  f.href = &quot;#{asset_path(&quot;woff.css&quot;)}&quot;;
  
  window.setTimeout(function(){
    x.parentNode.insertBefore(f, x);
  },0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the classic asynchronous script loader modified to be a stylesheet loader. With this approach you are guaranteeing a FOUT on the first load but on subsequent loads the font will be cached and there will be no FOUT.&lt;/p&gt;

&lt;p&gt;This is the simplest way of taking the font off the critical path. In order to make this technique work well and minimise the impact of the repaint you need to ensure that you adjust the typographic treatment of the fallback font to closely match the web font. In order to do this you might want to add a class to the body after the font has loaded which you use to update the type treatment. This is a similar approach to how Google Web Font Loader works.&lt;/p&gt;

&lt;h3 id='4_asynchronous_loading_with_local_storage'&gt;4. Asynchronous Loading with Local Storage&lt;/h3&gt;

&lt;p&gt;A similar approach to the one before, but one worth mentioning, is substituting Local Storage for the browser cache. This is a technique currently used by the Guardian on their responsive site and is validated by the theory that they can&amp;#8217;t always trust the http cache on mobile to be available to them.&lt;/p&gt;

&lt;p&gt;Essentially the technique is to check to see if the font is in Local Storage on load and, if so, inlcude it in the head in order to avoid any repaint. If it isn&amp;#8217;t available in the cache then the font is loaded asynchronously and stored in Local Storage after checking whether or not there is enough free space. The type on the page is then repainted.&lt;/p&gt;

&lt;p&gt;The only downside to this approach is the time taken to access Local Storage (minimal) and the fact that you are having to re-implement a browser feature. Still, it is a technique worth investigating if you have similar concerns.&lt;/p&gt;

&lt;p&gt;&lt;a href='https://github.com/guardian/frontend/blob/master/common/app/assets/javascripts/modules/fonts.js'&gt;https://github.com/guardian/frontend/blob/master/common/app/assets/javascripts/modules/fonts.js&lt;/a&gt;&lt;/p&gt;

&lt;h3 id='5_async__defer'&gt;5. Async &amp;amp; Defer&lt;/h3&gt;

&lt;p&gt;This is a neat solution proposed by Chris Coyier in his article on css-tricks (&lt;a href='http://css-tricks.com/preventing-the-performance-hit-from-custom-fonts/'&gt;http://css-tricks.com/preventing-the-performance-hit-from-custom-fonts/&lt;/a&gt;) where the font is downloaded asynchronously but not rendered to the screen until the second page visit.&lt;/p&gt;
&lt;pre&gt;&lt;code class='language-bash'&gt;  // ** Pseudo Ruby **

  // HEADER
  if fonts_are_cached do
    &amp;lt;link href=&quot;woff.css&quot; rel=&quot;stylesheet&quot; /&amp;gt;
  end


â€¨  // FOOTER
  if !fonts_are_cached do
    &amp;lt;script&amp;gt;
      // Load in custom fonts
      $.ajax({
        url: '#{asset_path(&quot;woff.css&quot;)}', 
        success: function () {
          // Set cookie
        }
      });
    &amp;lt;/script&amp;gt;
  end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A cookie is used to determine whether or not to render the stylesheet inline or load it asynchronously further down the page.&lt;/p&gt;

&lt;p&gt;What I like about this solution is that it eliminates the requirement for managing FOUT and forces you to not treat your fallback fonts as second class citizens. The downside to this approach is users who bounce straight from your site will download an asset that is never used so this technique should be used dependant upon your user behaviour.&lt;/p&gt;

&lt;p&gt;It does raise the interesting question of how important a web font really is though: if you&amp;#8217;re happy to serve the first view without one then is it really necessary at all?&lt;/p&gt;

&lt;h2 id='the_future__progressive_enhancement'&gt;The Future - Progressive Enhancement?&lt;/h2&gt;

&lt;p&gt;The issue of loading fonts really highlights the nuance of managing web performance. Rarely is there a holy grail solution to the problem; you need to balance the different performance costs and work out what is best for your user base. How much of your content is using fonts? How critical is that content? Whatâ€™s the cost of a round trip?&lt;/p&gt;

&lt;p&gt;In my opinion we need to stop thinking of web fonts as critical to the page and serve them only to users for whom it will enrich their experience. Making content unreadable for users on slow connections can&amp;#8217;t be the sacrifice for other users not seeing a repaint. In order to come up with a real solution we need to be able to differentiate between the two groups.&lt;/p&gt;

&lt;p&gt;At EdgeConf earlier this year there was a discussion around whether or not having access to the connection speed of the user would be beneficial, misused or even necessary. What would you use it for?&lt;/p&gt;

&lt;p&gt;It could certainly be valuable in this situation, allowing us to only load fonts when we feel it would be in the user&amp;#8217;s interest. Ideally this would not be a client-side solution.&lt;/p&gt;

&lt;p&gt;If Client Hints were able to expose this information we could decide whether or not to include the font on the server side. Even better, we could send that font with a header which told the browser if the font should block the render or not. These are all wishful solutions though. In the meantime we may have to roughly determine the connection speed of the browser using timing APIs.&lt;/p&gt;

&lt;p&gt;Progressive enhancement for web fonts does not need to be limited to performance issues either. There are other features we could be testing upon to determine whether or not to serve fonts: sub-pixel font rendering support, for example.&lt;/p&gt;

&lt;p&gt;I would always favour a solution which leverages the browser where possible. Despite this, for the moment, if you want to control this part of your website&amp;#8217;s performance you are going to have to work around the browser. Hopefully in the future we will have the ability to make better judgements using native capabilities, in the meantime we need to take a more thoughtful approach to including fonts on our web pages.&lt;/p&gt;
        
        </description>
      </item>

    

      

      

      <item>
        <title>Should the nav element be sectioning content?</title>
        <link>
        http://Ianfeather.github.com/ianfeatherV3/should-the-nav-element-be-sectioning-content/
      </link>
        <pubDate>Wed, 01 May 2013 08:52:00 +0100</pubDate>
        <guid>
        http://Ianfeather.github.com/ianfeatherV3/should-the-nav-element-be-sectioning-content/
      </guid>
        <description>
        
          &lt;p&gt;Recently we&amp;#8217;ve been nurturing the document outlines at Lonely Planet to create a simpler snapshot of the page for both accessibility and SEO reasons. One thing I was surprised about is how the &lt;em&gt;nav&lt;/em&gt; element creates a new section in the document outline.&lt;/p&gt;

&lt;p&gt;Sectioning content requires a heading or it will appear in the document outline as &amp;#8220;untitled&amp;#8221;.&lt;/p&gt;
&lt;div class='blog-grid'&gt;
  &lt;div class='column'&gt;
    &lt;h3&gt;bostonglobe.com&lt;/h3&gt;
    &lt;img src='/images/boston-globe-outline.png' /&gt;
  &lt;/div&gt;
  &lt;div class='column'&gt;
    &lt;h3&gt;smashingmagazine.com&lt;/h3&gt;
    &lt;img src='/images/smashing-magazine-outline.png' /&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;How often do you code up a navigational section with a heading? More often than not the elements and their position on the page is self-documenting. And do you even want your navigation to be part of the document outline at all?&lt;/p&gt;

&lt;p&gt;It is worth noting at this point that VoiceOver (I haven&amp;#8217;t tested other screen readers) will not read out &amp;#8216;Untitled nav&amp;#8217; and will just honour the links within. Also, not all html5 elements create a new sectioning context. &lt;em&gt;footer&lt;/em&gt;, for example, does not.&lt;/p&gt;

&lt;h2 id='decision_time'&gt;Decision time&lt;/h2&gt;

&lt;p&gt;This leaves you with a few options for marking up your navigation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A non html5 element. Using a &lt;em&gt;div&lt;/em&gt; or a &lt;em&gt;ul&lt;/em&gt; will not affect the document outline.&lt;/li&gt;

&lt;li&gt;A non html5 element with an aria navigation role. Maybe the best of both worlds but at the expense of not following the latest specs.&lt;/li&gt;

&lt;li&gt;&lt;em&gt;nav&lt;/em&gt; with a heading. If you want to use the more semantic &lt;em&gt;nav&lt;/em&gt; you could use a heading within, which will title your navigation in the outline. If it doesn&amp;#8217;t fit your design you can always visually hide it. If you&amp;#8217;re doing this though, should you need to be jumping through these hoops?&lt;/li&gt;

&lt;li&gt;&lt;em&gt;nav&lt;/em&gt; - Just live with having untitled navigation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which do you think is currently the most practical? More importantly, is the spec serving the majority of use cases with &lt;em&gt;nav&lt;/em&gt; being sectioning content?&lt;/p&gt;

&lt;h3 id='handy_resources'&gt;Handy resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://html5doctor.com/outlines/'&gt;http://html5doctor.com/outlines/&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://coding.smashingmagazine.com/2011/08/16/html5-and-the-document-outlining-algorithm/'&gt;http://coding.smashingmagazine.com/2011/08/16/html5-and-the-document-outlining-algorithm/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
        
        </description>
      </item>

    

      

      

      <item>
        <title>Configure requirejs to serve two files</title>
        <link>
        http://Ianfeather.github.com/ianfeatherV3/configure-requirejs-to-serve-two-files/
      </link>
        <pubDate>Tue, 30 Apr 2013 09:35:00 +0100</pubDate>
        <guid>
        http://Ianfeather.github.com/ianfeatherV3/configure-requirejs-to-serve-two-files/
      </guid>
        <description>
        
          &lt;h2 id='the_reason'&gt;The reason&lt;/h2&gt;

&lt;p&gt;Why would you want to serve two javascript files rather than concatenating them? If you want to leverage better caching of assets which are rarely updated.&lt;/p&gt;

&lt;p&gt;At &lt;a href='http://www.lonelyplanet.com/england/london/hotels'&gt;Lonely Planet&lt;/a&gt; our files are broken up into:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;core.js - Common libs and abstractions(eg. jquery), header and footer code, analytics&amp;lt;/li&amp;gt;&lt;/li&gt;

&lt;li&gt;application.js - The code responsible for everything between the header and footer&amp;lt;/li&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Core.js is likely to never change so we want any repeat users to enjoy the benefit of strong browser caching. We serve this script appended with an MD5 hash so that we can invalidate the cache when it does finally get updated.&lt;/p&gt;

&lt;h2 id='the_background'&gt;The background&lt;/h2&gt;

&lt;p&gt;We use the requirejs-rails port which includes the r.js optimiser. It does an awesome job of consolidating all your modules into one file which you load asynchronously using the requirejs script tag and a data-main attribute. The main focus seems to be web apps rather than traditional web sites and as a consequence there were very few resources available around the topic of serving more than one file.&lt;/p&gt;

&lt;p&gt;We wanted to use core.js to initialise the rest of the application once it had satisfied its own dependencies. The reason behind this was that core.js would then load jQuery before it was subsequently requested by application.js.&lt;/p&gt;

&lt;p&gt;After much playing around with the requirejs config it was clear this was the wrong approach. We were getting multiple files requested dynamically and it was becoming a headache. I knew there would be a simple solution and really it was just a matter of looking at it from the application side: core.js was really a dependency of application.js&lt;/p&gt;

&lt;h2 id='the_halfsolution'&gt;The half-solution&lt;/h2&gt;

&lt;h3 id='requirejs_config'&gt;require.js config:&lt;/h3&gt;
&lt;pre&gt;&lt;code class='language-bash'&gt;modules:
  - name: 'application'
    exclude: ['core']
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='applicationjscoffee'&gt;application.js.coffee:&lt;/h3&gt;
&lt;pre&gt;&lt;code class='language-coffeescript'&gt;require ['core', 'lib/application'], (Core, Application) -&gt;
  Application = new Application()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why this didn&amp;#8217;t work? Application.js had dependencies which themselves depended on jQuery. Require loaded core and lib/application at the same time leading to three scripts being loaded by requirejs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;core.js&lt;/li&gt;

&lt;li&gt;application.js&lt;/li&gt;

&lt;li&gt;jquery.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not bad, but we have an extra request to load jQuery when really we wanted it to be included in core.js&lt;/p&gt;

&lt;h2 id='the_actual_solution'&gt;The actual solution&lt;/h2&gt;

&lt;h3 id='requirejs_config'&gt;require.js config:&lt;/h3&gt;
&lt;pre&gt;&lt;code class='language-bash'&gt;modules:
  - name: 'appplication'
    exclude: ['core']

findNestedDependencies: true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='applicationjscoffee'&gt;application.js.coffee:&lt;/h3&gt;
&lt;pre&gt;
&lt;code class='language-coffeescript'&gt;require ['core'], () -&gt;
  require ['jquery', 'lib/application'], ($, Application)-&gt;
    $ -&gt;
      application = new Application()
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id='output'&gt;Output:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;core.js&lt;/li&gt;

&lt;li&gt;application.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Running r.js will optimise core.js separately from application.js. Once it executes, the process will happen like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try to find core.js&lt;/li&gt;

&lt;li&gt;We don&amp;#39;t have it bundled so load the optimised core.js dynamically&lt;/li&gt;

&lt;li&gt;Once core.js is loaded we move into the require function&lt;/li&gt;

&lt;li&gt;Try to find jQuery. Requirejs knows it is already loaded.&lt;/li&gt;

&lt;li&gt;Try to find lib/application.js. This is bundled into application.js from the r.js optimisation step.&lt;/li&gt;

&lt;li&gt;Move into the nested require function&lt;/li&gt;

&lt;li&gt;Initialise application()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;#39;s all there is to it. We can now specify any rarely used modules as a dependency of core.js, leverage the browser cache, and make faster websites.&lt;/p&gt;
        
        </description>
      </item>

    

      

      

      <item>
        <title>Tools and Cultural Shifts of 2012</title>
        <link>
        http://Ianfeather.github.com/ianfeatherV3/tools-and-cultural-shifts-of-2012/
      </link>
        <pubDate>Tue, 01 Jan 2013 12:59:00 +0000</pubDate>
        <guid>
        http://Ianfeather.github.com/ianfeatherV3/tools-and-cultural-shifts-of-2012/
      </guid>
        <description>
        
          &lt;p class='blog-intro'&gt;Our acceptance of competent 3rd party code and adoption of tools seems to have been the biggest shift in Front End Development over the past 12 months. The plague, and fear, of jQuery plugins have been replaced by the adoption of libraries like [requireJS](http://requirejs.org/), [backbone](http://backbonejs.org/) and [underscore](http://underscorejs.org/). The take-up of pre-processors like [Sass](http://sass-lang.com/), [Less](http://lesscss.org/) and [Coffeescript](http://coffeescript.org/) have been staggering (and wrought by confusion and competition). The amount of new tools that have come out of the woodwork and required your *immediate attention* has been overwhelming.&lt;/p&gt;&lt;blockquote class='pull-quote'&gt;For our current project we have deployed to production just over 2000 times in the past 7 months.&lt;/blockquote&gt;
&lt;p&gt;I joined Lonely Planet in January 2012 and the list of tools/libraries that I&amp;#8217;ve been introduced to over the last year is chock full of names that would have baffled me before. If I were to list those which we use day-to-day at work it would include: &lt;a href='https://github.com/etsy/statsd'&gt;StatsD&lt;/a&gt;, &lt;a href='http://graphite.wikidot.com/'&gt;Graphite&lt;/a&gt;, &lt;a href='https://github.com/paperlesspost/graphiti'&gt;Graphiti&lt;/a&gt;, &lt;a href='http://logstash.net/'&gt;LogStash&lt;/a&gt;, &lt;a href='http://www.elasticsearch.org/'&gt;Elastic Search&lt;/a&gt;, &lt;a href='http://www.akamai.com'&gt;Akamai&lt;/a&gt;, &lt;a href='https://github.com/lonelyplanet/fozzie'&gt;Fozzie&lt;/a&gt;, &lt;a href='http://nodejs.org/'&gt;Node&lt;/a&gt;, &lt;a href='http://expressjs.com/'&gt;Express&lt;/a&gt;, &lt;a href='https://github.com/guard/guard'&gt;Guard&lt;/a&gt;, &lt;a href='https://github.com/documentcloud/jammit'&gt;Jammit&lt;/a&gt;, &lt;a href='http://requirejs.org/'&gt;RequireJS&lt;/a&gt;, &lt;a href='https://github.com/lautis/uglifier'&gt;Uglifier&lt;/a&gt;, &lt;a href='http://gruntjs.com/'&gt;Grunt&lt;/a&gt;, &lt;a href='http://www.postgresql.org/'&gt;Postgres&lt;/a&gt;, &lt;a href='http://rubyonrails.org/'&gt;Rails&lt;/a&gt;, &lt;a href='http://wiki.nginx.org/Main'&gt;Nginx&lt;/a&gt;, &lt;a href='http://newrelic.com/'&gt;New Relic&lt;/a&gt;, &lt;a href='http://www.nagios.org/'&gt;Nagios&lt;/a&gt;, &lt;a href='http://www.pagerduty.com/'&gt;PagerDuty&lt;/a&gt;, &lt;a href='http://www.opscode.com/chef/'&gt;Chef&lt;/a&gt;, &lt;a href='http://wiki.opscode.com/display/chef/Knife'&gt;Knife&lt;/a&gt;, &lt;a href='http://aws.amazon.com/'&gt;AWS suite&lt;/a&gt;, &lt;a href='http://www.browserstack.com/'&gt;BrowserStack&lt;/a&gt;, &lt;a href='http://bem.info/method/'&gt;BEM&lt;/a&gt;, &lt;a href='http://sass-lang.com/'&gt;Sass&lt;/a&gt;, &lt;a href='http://haml.info/'&gt;Haml&lt;/a&gt;, &lt;a href='http://coffeescript.org/'&gt;Coffeescript&lt;/a&gt;&amp;#8230; and many more. The list goes on, and I&amp;#8217;ve forgotten plenty. Exhausting right?&lt;/p&gt;

&lt;p&gt;But it hasn&amp;#8217;t just been the tools that have taken prescience, new channels of focus have evolved for me outside of the traditional Big Three of Front End Development. The main areas I&amp;#8217;ve been involved with as a result of my work at &lt;a href='http://www.lonelyplanet.com/vietnam/ho-chi-minh-city/hotels'&gt;Lonely Planet&lt;/a&gt; have been Performance, Preprocessors and Rails, Continuous Deployment and BDD.&lt;/p&gt;

&lt;h2 id='performance'&gt;Performance&lt;/h2&gt;

&lt;p&gt;If I&amp;#8217;m being super critical, my knowledge around performance pre 2012 was limited to caching jQuery selectors and following the &lt;a href='http://developer.yahoo.com/yslow/'&gt;YSlow&lt;/a&gt; guidelines. If I were to give myself a break though these guidelines are more than enough for an average Joe website. Getting to understand, implement and refine the key concepts behind Lonely Planet&amp;#8217;s concept of &lt;a href='http://www.slideshare.net/mbjenn/performance-and-metrics-at-lonely-planet-14589911'&gt;&amp;#8216;Screamingly Fast&amp;#8217;&lt;/a&gt; has been a real eye opener and shaving off the milliseconds has become a new form of addiction.&lt;/p&gt;

&lt;p&gt;Performance has been something we live and breathe at LP and we discuss, demo and practise it constantly. We&amp;#8217;ve also got a long way to go to get to where we need to be. Our monitoring is good (mostly due to &lt;a href='https://github.com/lonelyplanet/fozzie'&gt;Fozzie&lt;/a&gt;) but still has a long way to go on the front end. Our reporting and alerting needs to be vastly improved and these are important challenges for 2013.&lt;/p&gt;

&lt;h2 id='preprocessors_and_rails'&gt;Preprocessors and Rails&lt;/h2&gt;

&lt;p&gt;The fact that I hadn&amp;#8217;t written a line of Sass prior to 2012 amazes me. The same applies to both Haml and CoffeeScript only to lesser degrees.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve had my ups and downs with CoffeeScript. At first it was fascinating because it was something new to learn, then infuriating because I couldn&amp;#8217;t write valid CoffeeScript for JavaScript I could have written. Next up came the understanding and the enjoyment it could give, the ease and speed at which you could write and the simplicity of stripping out the verbose syntax. Then more infuriation, as I began to get sloppy with real JavaScript and forgot to reintroduce the verbose syntax. Now, fortunately, I am in somewhat of a take it or leave it position though if I have a choice I tend to write CoffeeScript.&lt;/p&gt;

&lt;p&gt;Sass is a God send and something that frustrates me if I don&amp;#8217;t have access to (thankfully a rare occurrence). Crafting a CSS architecture using Sass has been a learning curve though and it&amp;#8217;s one that I, and I suspect everyone else, is still on.&lt;/p&gt;

&lt;p&gt;Haml just makes sense. &lt;a href='http://slim-lang.com/'&gt;Slim&lt;/a&gt; makes even more sense.&lt;/p&gt;

&lt;p&gt;There are other aspects of rails that I&amp;#8217;ve enjoyed learning. Understanding the &lt;a href='http://guides.rubyonrails.org/asset_pipeline.html'&gt;asset pipeline&lt;/a&gt;, the presenter layer, creating gems for our CSS and JS assets and using guard to do more or less everything, to name a few, have all been new challenges. Learning to write Ruby has been particularly enjoyable.&lt;/p&gt;

&lt;h2 id='continuous_deployment'&gt;Continuous Deployment&lt;/h2&gt;

&lt;p&gt;Previous to 2012 I&amp;#8217;d worked in an agile environment where we deployed to production at the end of each sprint (1 or 2 weeks). This was after a deploy to a staging environment and a stint of QA. I wasn&amp;#8217;t involved in the build process and my involvement ended after my code was tested and proven to be working.&lt;/p&gt;

&lt;p&gt;For our current project we have deployed to production just over 2000 times in the past 7 months and I&amp;#8217;ve been involved throughout. That&amp;#8217;s quite a difference, not only from a cultural perspective but also from an architectural one. We don&amp;#8217;t have any QAs on the project and we&amp;#8217;ve never rolled back a deploy. We&amp;#8217;ve broken things, sure, but we&amp;#8217;ve put ourselves in a position to quickly fix and iterate on them.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s fair to say I was late to the party on this. John Allspaw&amp;#8217;s groundbreaking &lt;a href='http://www.slideshare.net/jallspaw/10-deploys-per-day-dev-and-ops-cooperation-at-flickr'&gt;10 deploys a day&lt;/a&gt; talk was way back in 2009 and many companies have been practising this technique since then. I&amp;#8217;m glad to be at the party though :)&lt;/p&gt;

&lt;p&gt;The architecture is built around &lt;a href='http://www.opscode.com/chef/'&gt;Chef&lt;/a&gt;, the tool from the guys at &lt;a href='http://www.opscode.com/'&gt;Opscode&lt;/a&gt;, and we use &lt;a href='http://aws.amazon.com/ec2/'&gt;ec2&lt;/a&gt; instances to host our code with a load balancer in place to allow us to run AB tests.&lt;/p&gt;

&lt;p&gt;One of the tools that I&amp;#8217;ve been super impressed with is &lt;a href='http://wiki.opscode.com/display/chef/Knife'&gt;Knife&lt;/a&gt; (Opscode again). It&amp;#8217;s a command line tool for interacting and configuring with your cloud based instances. The main benefit for me has been its ability to automatically SSH into multiple remote instances and run commands. So say, for example, we have three different versions of our project running on separate instances (an AB test and a canary build for example) and I&amp;#8217;ve updated each of the git repos with a minor copy change or bumped a gem; I could run one CLI command using knife which would search all instances for those related to our projects, SSH into each of them and run a sudo command to pull the latest code from the repo and then rebuild the instance. A massive time saver and a very cool piece of kit.&lt;/p&gt;

&lt;p&gt;The other, non technical, side of Continuous Experimentation and AB testing has been a reintroduction to Statistics (something I hadn&amp;#8217;t touched since A-Level maths!) around AB testing. I&amp;#8217;ve learnt things like understanding the volumes required to gain statistical confidence in the result of your AB test, the learnings we can take from the full histogram and when to ignore certain statistical findings.&lt;/p&gt;

&lt;h2 id='bdd'&gt;BDD&lt;/h2&gt;

&lt;p&gt;Tests are those things that back end devs write, right? Bang goes that attitude in 2012 and it&amp;#8217;s surprising we got away with it for so long on the Front.&lt;/p&gt;

&lt;p&gt;On our current project we have ~1000 unit and integration steps. This provides a lot of comfort when you&amp;#8217;re making changes that will go live without QA and provides me with a certain amount of anxiety when I realise our coverage is slipping. This is a huge culture shift in itself but even more so that on the front end we are now using Behaviour and Test Driven Development techniques that have long escaped us.&lt;/p&gt;

&lt;p&gt;At first the inconvenience of course outweighed the &amp;#8216;best practice&amp;#8217; but it only takes one bug to slip through for that attitude to change. BDD for me has been an attitude shift in that it allows me to effectively write the blueprint for my code before building and ensures it will be focused and decoupled.&lt;/p&gt;

&lt;p&gt;This is another area I will definitely look to improve on during 2013.&lt;/p&gt;

&lt;h2 id='what_havent_i_learned_what_have_i_missed_out_on'&gt;What haven&amp;#8217;t I learned, what have I missed out on?&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;ve done next to no work on anything responsive and in fact my exposure has been limited to this blog and a couple of microsites. In some ways I think this is a shame because it&amp;#8217;s a challenging and fascinating area. This is likely something that will become more important for us in 2013.&lt;/p&gt;

&lt;p&gt;I haven&amp;#8217;t worked with any of the fancy new JS frameworks like &lt;a href='http://backbonejs.org/'&gt;Backbone&lt;/a&gt;, &lt;a href='http://emberjs.com/'&gt;Ember&lt;/a&gt; or &lt;a href='http://angularjs.org/'&gt;Angular&lt;/a&gt;. Our project toes the line between website and webapp and we made a decision to build without a framework early on. I&amp;#8217;m eager to get involved with these, so a side-project in the new year will likely be built using one of these new technologies.&lt;/p&gt;

&lt;h2 id='whats_next_for_2013'&gt;What&amp;#8217;s next for 2013?&lt;/h2&gt;

&lt;p&gt;Who knows? It&amp;#8217;s going to be an interesting one. I don&amp;#8217;t expect it to be quite as intense as the last one in regards to the amount of new technologies but really I have no idea. It&amp;#8217;s guaranteed to be an exciting one.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m looking forward to doing &lt;a href='http://pragprog.com/book/btlang/seven-languages-in-seven-weeks'&gt;&amp;#8216;Seven Languages in Seven Weeks&amp;#8217;&lt;/a&gt; with the guys at work and I&amp;#8217;ve had an inkling for some time to have a play with &lt;a href='https://github.com/clojure/clojurescript'&gt;ClojureScript&lt;/a&gt;. I also have a huge list of things to learn which I have been eager to get round to for a while, things like: &lt;a href='http://www.w3.org/TR/css3-flexbox/'&gt;FlexBox&lt;/a&gt;, &lt;a href='http://gruntjs.com/'&gt;Grunt&lt;/a&gt;, &lt;a href='https://github.com/mozilla/x-tag'&gt;X-Tag&lt;/a&gt;, &lt;a href='http://www.webrtc.org/'&gt;Web-RTC&lt;/a&gt;&amp;#8230;&lt;/p&gt;

&lt;p&gt;Other than that, I think it&amp;#8217;s going to be more of the same and hopefully a deeper knowledge of each aspect. We&amp;#8217;ve got a long way to go to get our setup exactly how we want it but I look forward to us never quite getting there and always pushing for more.&lt;/p&gt;
        
        </description>
      </item>

    

      

      

      <item>
        <title>Object Oriented Sass</title>
        <link>
        http://Ianfeather.github.com/ianfeatherV3/object-oriented-sass/
      </link>
        <pubDate>Mon, 30 Jul 2012 13:51:00 +0100</pubDate>
        <guid>
        http://Ianfeather.github.com/ianfeatherV3/object-oriented-sass/
      </guid>
        <description>
        
          &lt;p&gt;Iâ€™ve been re-examining how we declare and manage CSS objects at LP, recently using the placeholder syntax (%) in Sass over a class directly in the markup. I had a couple of reservations around this, partly because itâ€™s a leap away from the traditional OOCSS method of using multiple classes as building blocks but also in its usability and impact on performance.&lt;/p&gt;

&lt;p&gt;The more Iâ€™ve been dabbling with the placeholder approach though; the more I can see that traversing the middle ground between the two is going to result in suboptimal code. So I decided to do some research and disprove my reservations.&lt;/p&gt;

&lt;p&gt;For those who haven&amp;#8217;t yet used them, selectors with placeholders will not be included in the CSS output but they are able to be extended. For example, using everyoneâ€™s favourite media object would mean we no longer have to chain the .media class to benefit from its abstraction and we can make sure the media declaration won&amp;#8217;t be output unless used:&lt;/p&gt;
&lt;pre&gt;&lt;code class='language-scss'&gt;%media
  â€¦ the media object â€¦

.comment-block
  @extend %media
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Effectively what this allows us to do is construct our css objects in our css as opposed to in the markup. There are definitely pros and cons to this approach and all could be subjective depending on your existing codebase and workflow. I&amp;#8217;ve highlighted some below but I&amp;#8217;d be keen to hear of any that I have missed.&lt;/p&gt;

&lt;h2 id='oosass_pros_and_cons'&gt;OOSass pros and cons:&lt;/h2&gt;

&lt;h3 id='pros'&gt;Pros&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;More readable style declarations - thereâ€™s no need to keep your naming short&lt;/li&gt;

&lt;li&gt;Leaner markup&lt;/li&gt;

&lt;li&gt;More selective use of styles (only really applicable to sites with multiple stylesheets responsible for different areas)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='cons_all_debatable'&gt;Cons (all debatable)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Back end devs have to write Sass if they want to build up styles&lt;/li&gt;

&lt;li&gt;Slower to iterate on styles than directly on the dom&lt;/li&gt;

&lt;li&gt;Only possible using preprocessors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='performance'&gt;Performance&lt;/h2&gt;

&lt;p&gt;If youâ€™re working with OOCSS chances are you care about performance and metrics. So, whilst the placeholder syntax is feeling like a nice approach to me, I wanted to run some tests to see the effect on css size.&lt;/p&gt;

&lt;p&gt;I took the css for a previous incarnation of ianfeather.co.uk as the base file. It was written a long time ago with loose OOCSS and is fairly performant but not heavily optimised.&lt;/p&gt;

&lt;p&gt;Following this, I optimised the CSS by abstracting out some classes and thinning down a few selectors. I wasnâ€™t expecting big improvements but I wanted to ensure that I had a performant baseline file to test against.&lt;/p&gt;

&lt;p&gt;My main concern was that the gzipped file size would actually increase because of less repetition in the code so it was good to see that this is minimal and that the final code is still smaller. (This blocker could potentially be removed only by extending placeholders which have at least two rule declarations inside.)&lt;/p&gt;
&lt;table&gt;
  &lt;tbody&gt;
    &lt;thead class='table-header'&gt;
      &lt;th&gt;&amp;nbsp;&lt;/th&gt; &lt;th&gt;Size&lt;/th&gt; &lt;th&gt;Gzipped&lt;/th&gt; &lt;th&gt;Compression&lt;/th&gt;
    &lt;/thead&gt;
    &lt;tr&gt;
      &lt;td&gt;Base&lt;/td&gt;
      &lt;td class='val' data-label='Size'&gt;26514&lt;/td&gt;
      &lt;td class='val' data-label='Gzipped'&gt;7055&lt;/td&gt;
      &lt;td class='val' data-label='Compression'&gt;73%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OOCSS&lt;/td&gt;
      &lt;td class='val' data-label='Size'&gt;26411&lt;/td&gt;
      &lt;td class='val' data-label='Gzipped'&gt;6196&lt;/td&gt;
      &lt;td class='val' data-label='Compression'&gt;77%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OOSass&lt;/td&gt;
      &lt;td class='val' data-label='Size'&gt;24520&lt;/td&gt;
      &lt;td class='val' data-label='Gzipped'&gt;5920&lt;/td&gt;
      &lt;td class='val' data-label='Compression'&gt;76%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id='performance_in_the_browser'&gt;Performance in the browser&lt;/h2&gt;

&lt;p&gt;The CSS file size is key to the critical path but I also wanted to ensure that using this method wouldnâ€™t increase the selector matching or paint time.&lt;/p&gt;

&lt;p&gt;I created two pages, each with 1200 buttons, one using chained classes and one using extended classes. I then profiled them using Operaâ€™s CSS Profiler. Unfortunately the results were absolutely identical so this test was inconclusive. Perhaps a larger test file with more variance would be required to create a true test.&lt;/p&gt;

&lt;p&gt;The Profiled results for both pages:&lt;/p&gt;
&lt;img alt='Opera profile view' src='http://getfile3.posterous.com/getfile/files.posterous.com/temp-2012-07-30/gqljjyuevtomeeyHxwFoHctuaqjfAHBqCcuqEcufskGgoioubHnEzukhoqqe/opera-profile.jpg.scaled699.jpg' /&gt;
&lt;h2 id='conclusions'&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Whilst our test showed there was no huge performance benefit for this approach, it also failed to show a downside for it. This, for me, is a validation of the approach and allows us to look at the more intangible benefits we outlined earlier.&lt;/p&gt;

&lt;p&gt;I also think there are performance gains to be made when scaling up. Weâ€™ll use our Sass gem, Beaker, across a fairly wide range of projects and using this will mean each project has access to all objects and base classes as well as the ability to pick and choose which are required and which will be output to their project.css file.&lt;/p&gt;

&lt;p&gt;Whether or not this approach is right for you is likely dependant on your existing css architecture. For us, we have the opportunity to shape our future CSS and I think this is a healthy way of doing it.&lt;/p&gt;
        
        </description>
      </item>

    

      

      

      <item>
        <title>The Neglected Medium</title>
        <link>
        http://Ianfeather.github.com/ianfeatherV3/the-neglected-medium-can-we-replicate-creative-communication-online/
      </link>
        <pubDate>Mon, 04 Jun 2012 15:17:00 +0100</pubDate>
        <guid>
        http://Ianfeather.github.com/ianfeatherV3/the-neglected-medium-can-we-replicate-creative-communication-online/
      </guid>
        <description>
        
          &lt;p&gt;The smoke hung to the ceiling, the smokiness of the whisky clung to the back of our throats. The comfort of the walls liberated our expression. We were conspiring, and madness dared to precede us.&lt;/p&gt;

&lt;p&gt;Conspiring on change, deliberating on decision, gathering our thoughts for the future of the web: as we could each see it. Tongues flew fast on the back of ideas and tangents. We bounced from process to product, from theory to theatre and concepts had their potential amplified by each discourse.&lt;/p&gt;

&lt;p&gt;Some of us sat up, stood, paced, drew wildly on the walls. Others stared at the floor and shook their heads, looking up to interject in the vein of &amp;#8216;Exactly!&amp;#8217;, &amp;#8216;Tell that to the world&amp;#8217; or &amp;#8216;Pass me the bottle&amp;#8217;.&lt;/p&gt;

&lt;p&gt;Can we ever recreate this fast flowing and fluid communication through a remote medium? Do remote teams suffer as a consequence?&lt;/p&gt;
        
        </description>
      </item>

    

      

      

      <item>
        <title>Hangover Hack Result</title>
        <link>
        http://Ianfeather.github.com/ianfeatherV3/hangover-hack-result/
      </link>
        <pubDate>Sat, 24 Mar 2012 15:17:00 +0000</pubDate>
        <guid>
        http://Ianfeather.github.com/ianfeatherV3/hangover-hack-result/
      </guid>
        <description>
        
          &lt;ul&gt;
&lt;li&gt;&lt;a class='btn btn-external btn-photo' href='http://ianfeather.co.uk/playground/image-play/'&gt;Use the app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class='btn btn-external btn-github' href='https://github.com/Ianfeather/image-play'&gt;View the source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Last Saturday, in a canyon of a hangover, I decided to &lt;a href='http://ianfeather.co.uk/hangover-hack/'&gt;ditch my client work and just make something fun&lt;/a&gt;. I&amp;#8217;d encourage others to do the same. Maybe not &lt;I&gt;in favour&lt;/I&gt; of client work but do try and make some time just to play around, experiment and recapture that feeling of why you first got enraptured by the web.&lt;/p&gt;
&lt;blockquote class='pull-quote'&gt;It's fun to just mess about with code like no one is watching. That was the real lesson.&lt;/blockquote&gt;
&lt;p&gt;I gave myself a few guidelines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not to get wrapped up in best practices&lt;/li&gt;

&lt;li&gt;Chose speed of development over maintainability. In fact, ignore maintainability.&lt;/li&gt;

&lt;li&gt;First thought, best thought.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last is one I borrowed from Jack Kerouac. I didn&amp;#8217;t know what I was going to build and so it made sense to make the outcome an organic production of my erratic, pickled in alcohol, thought process.&lt;/p&gt;

&lt;p&gt;I wanted to build something involving images so I dragged out an old chunk of code from a previous project and tapped into the Flickr api. I liked the idea of being able to build a grid of photos based on some parameters. Maybe based on recent keywords from a twitter stream or using geolocation. I started out with just a search box and a lazy grid built of four columns with a ragged y endpoint. A cheat of a solution but I was determined to cheat where possible: I wanted quick development and iteration.&lt;/p&gt;

&lt;p&gt;Once I had the gallery mode working on search I got distracted by the idea of using filters to see if you could create instagram like photos with CSS. I could have used a js library but had heard that chrome canary had introduced support for CSS filters so I fired it up and built a little webkit only control panel, a grin on my face from the anarchic approach I was taking in light of recent industry dialogue on the matter.&lt;/p&gt;

&lt;h2 id='what_i_learned'&gt;What I learned?&lt;/h2&gt;

&lt;p&gt;It&amp;#8217;s fun to just mess about with code like no one is watching. That was the real lesson.&lt;/p&gt;

&lt;h2 id='what_improvements_would_i_make'&gt;What improvements would I make?&lt;/h2&gt;

&lt;p&gt;It took around 6 hours to make, although I split that time with 6 nations rugby, but if I had had more time I&amp;#8217;d build in instagram support and add the ability to switch back and forth between the two modes more easily.&lt;/p&gt;

&lt;p&gt;Maybe I&amp;#8217;ll add that in the future but it&amp;#8217;s more likely I&amp;#8217;ll just build something new. Either way, in the future, I&amp;#8217;ll definitely be building something just for the sake of it.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://ianfeather.co.uk/playground/image-play'&gt;Play around with the end result&lt;/a&gt;&lt;/p&gt;
        
        </description>
      </item>

    

      

      

      <item>
        <title>Hangover Hack</title>
        <link>
        http://Ianfeather.github.com/ianfeatherV3/hangover-hack/
      </link>
        <pubDate>Sat, 17 Mar 2012 15:16:00 +0000</pubDate>
        <guid>
        http://Ianfeather.github.com/ianfeatherV3/hangover-hack/
      </guid>
        <description>
        
          &lt;p&gt;I&amp;#8217;m hungover, on crutches and my girlfriend is at work. I have loads of client work to deal with and by rights that is what today should involve but instead I&amp;#8217;m going to do something different, something I rarely do.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m going to make something &lt;em&gt;FUN&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For no other reason. I&amp;#8217;m just going to take a few hours out and see what comes up at the far end. Maybe it&amp;#8217;s something I should do more often, something everyone should do more often. Let&amp;#8217;s see.&lt;/p&gt;

&lt;p&gt;The six nations is on tv and I&amp;#8217;ve got a cup of tea on the go. Hopefully writing this will mean that I actually do it rather than getting caught up in other bits.&lt;/p&gt;

&lt;p&gt;Ps. Sorry to my clients in advance.&lt;/p&gt;
        
        </description>
      </item>

    

      

      

      <item>
        <title>A Cheat Sheet for the Terminal-Averse</title>
        <link>
        http://Ianfeather.github.com/ianfeatherV3/a-cheat-sheet-for-the-terminal-averse/
      </link>
        <pubDate>Tue, 14 Feb 2012 15:16:00 +0000</pubDate>
        <guid>
        http://Ianfeather.github.com/ianfeatherV3/a-cheat-sheet-for-the-terminal-averse/
      </guid>
        <description>
        
          &lt;p&gt;Did you know there&amp;#8217;s a cheat sheet you can build into Terminal? It&amp;#8217;s one that allows you to run complex git commands and change directories just by hitting a couple of keys. The best part is they&amp;#8217;re keys that you define for yourself. If you&amp;#8217;re a designer/front end developer who is wary and resistant to the growing impetus of the command line then you&amp;#8217;re in luck.&lt;/p&gt;
&lt;blockquote class='pull-quote'&gt;By defining rules around my most common workflow routines I've been able to improve productivity whilst also taming an area that was previously foreign territory.&lt;/blockquote&gt;
&lt;p&gt;Cut to the source code: &lt;a href='https://github.com/Ianfeather/aliases/blob/master/aliases'&gt;https://github.com/Ianfeather/aliases/blob/master/aliases&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='heres_how_it_works'&gt;Here&amp;#8217;s how it works:&lt;/h2&gt;

&lt;p&gt;Being a terminal-averse user you&amp;#8217;re probably not a huge fan of Vim. If this is the case you can invoke textmate from the command line as standard. If you use coda then you will have to download this plugin first (&lt;a href='http://wefoundland.com/project/command-line_coda/'&gt;http://wefoundland.com/project/command-line_coda/&lt;/a&gt;) but it will make your life significantly easier. For this tutorial I&amp;#8217;m going to use textmate but if you use coda simply replace &amp;#8216;mate&amp;#8217; with &amp;#8216;coda&amp;#8217; below, or the equivalent for your favourite text editor.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fire up terminal&lt;/li&gt;

&lt;li&gt;Open your local version of bash_profile&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class='language-bash'&gt;mate ~/.bash_profile&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a link to your local aliases file by adding this line at the bottom of the file&lt;/p&gt;
&lt;pre&gt;&lt;code class='language-bash'&gt;source ~/.bash/aliases&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, save and close 3. Navigate to your local bash folder&lt;/p&gt;
&lt;pre&gt;&lt;code class='language-bash'&gt;cd ~/.bash&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the above command yields a &amp;#8216;directory does not exist&amp;#8217; error, create this directory by running&lt;/p&gt;
&lt;pre&gt;&lt;code class='language-bash'&gt;mkdir ~/.bash&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now create an aliases file and open it&lt;/p&gt;
&lt;pre&gt;&lt;code class='language-bash'&gt;touch aliases
mate aliases
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;This file is where you can create and manage your shortcuts to your oft-used commands. It&amp;#8217;s remarkably easy. For example:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class='language-bash'&gt;alias gb='git branch'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above line would allow you to view a list of your current git branches simply by typing gb directly into the command line, and:&lt;/p&gt;
&lt;pre&gt;&lt;code class='language-bash'&gt;alias ia='open -b jp.informationarchitects.WriterForMacOSX'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Would allow you to open up a file in iA Writer by running: ia myfile.md&lt;/p&gt;

&lt;p&gt;You can add, group and comment (#) as many rules as you like within this file. Here is a sample of my current alias setup: &lt;a href='https://github.com/Ianfeather/aliases/blob/master/aliases'&gt;https://github.com/Ianfeather/aliases/blob/master/aliases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s worth noting that this only works for your local user. If you want to create the same rules for all users you execute the same steps in /etc/aliases. Each user would still be able to override these using the above rules though.&lt;/p&gt;

&lt;p&gt;By defining rules around my most common workflow routines I&amp;#8217;ve been able to improve productivity whilst also taming an area that was previously foreign territory.&lt;/p&gt;

&lt;p&gt;Give it a whirl. Any questions, I&amp;#8217;ll do my best to help.&lt;/p&gt;
        
        </description>
      </item>

    
  </channel>

</rss>